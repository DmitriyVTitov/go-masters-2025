package srp

// Принцип единственной ответственности (Single Responsibility Principle - SRP)
// У каждой сущности (функции, объекта) должен быть только один источник изменений.

type строка string
type байт byte
type неполадка error

// Проблема.
// В конструкторе и функции получения данных предполагается, что все публичные
// облака работают одинаково.
// Но, например, если Яндекс.Облако перейдет на токен вместо имени и пароля,
// то потребуется вносить изменения во всю логику и API пакета.
// Следует положить клиентов разных облаков в разные пакеты.

type КлиентХранилищаДанных struct {
	УчёткаЯндексДиск УчётныеДанные
	УчёткаГуглДиск   УчётныеДанные
}

type УчётныеДанные struct {
	ИмяПользователя строка
	Пароль          строка
}

func НовыйКлиент(учётка УчётныеДанные, типКлиента строка) *КлиентХранилищаДанных {
	var клиент КлиентХранилищаДанных
	switch типКлиента {
	case "Яндекс":
		// ...
	case "Гугол":
		// ...
	}
	return &клиент
}

func (к *КлиентХранилищаДанных) ПолучитьФайл(
	название строка,
	типКлиента строка,
) ([]байт, неполадка) {
	switch типКлиента {
	case "Яндекс":
		// ...
	case "Гугол":
		// ...
	}

	return nil, nil
}
